name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_ENV: test
  MONGODB_URL: mongodb://localhost:27017/node-boilerplate-test
  JWT_SECRET: test-jwt-secret-for-ci
  JWT_ACCESS_EXPIRATION_MINUTES: 30
  JWT_REFRESH_EXPIRATION_DAYS: 30

jobs:
  # Security and dependency checks
  security:
    name: Security & Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run security audit
        run: yarn audit --level moderate

      - name: Check for vulnerabilities
        run: npx audit-ci --moderate

  # Code quality checks
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run Prettier check
        run: yarn prettier:check || yarn prettier

      - name: Run ESLint
        run: yarn lint

      - name: Check for unused dependencies
        run: npx depcheck

  # Main testing job
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: [security, code-quality]

    strategy:
      matrix:
        node-version: [16, 18, 20]

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Wait for MongoDB
        run: npx wait-on tcp:localhost:27017 --timeout 60000

      - name: Run unit tests
        run: yarn test --passWithNoTests

      - name: Run integration tests
        run: yarn test --testPathPattern=integration

      - name: Generate coverage report
        run: yarn coverage
        if: matrix.node-version == '18'

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '18'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          fail_ci_if_error: false

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        if: matrix.node-version == '18'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./coverage/lcov.info

  # Docker build test
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: node-express-boilerplate:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker container
        run: |
          docker run --rm -d --name test-container \
            -e NODE_ENV=production \
            -e MONGODB_URL=mongodb://host.docker.internal:27017/test \
            -p 3000:3000 \
            node-express-boilerplate:test
          sleep 10
          curl -f http://localhost:3000/v1/docs || exit 1
          docker stop test-container

  # Performance testing (optional)
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request'

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Start application
        run: |
          yarn start &
          npx wait-on http://localhost:3000 --timeout 30000
        env:
          NODE_ENV: production

      - name: Run performance tests with Artillery
        run: |
          npx artillery quick --count 10 --num 5 http://localhost:3000/v1/docs

  # Deployment readiness check
  deploy-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if ready for deployment
        run: |
          echo "✅ All tests passed"
          echo "✅ Docker build successful"
          echo "✅ Ready for deployment"

      - name: Create deployment artifact
        run: |
          tar -czf deployment-${{ github.sha }}.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=tests \
            --exclude=coverage \
            .

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment-${{ github.sha }}.tar.gz
          retention-days: 30
